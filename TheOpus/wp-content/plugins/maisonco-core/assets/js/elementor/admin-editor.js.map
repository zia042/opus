{"version":3,"sources":["before.js","contactform.js","template.js","after.js"],"names":["$","Elementor_ContactForm","_this","this","_classCallCheck","elementor","hooks","addAction","panel","onPanelShow","_createClass","key","value","instance","templateIdControl","content","currentView","collection","findWhere","name","get","templateIdInput","children","findByModelCid","cid","$controlOptions","$el","find","$select","$optionsSelect","eq","currentValue","model","sort","a","b","c","text","toLowerCase","d","empty","append","val","on","onTemplateIdChange","trigger","formID","options","elementSettingsModel","attributes","template_id","type","types","$editButton","length","remove","editUrl","ElementorConfig","home_url","prop","jQuery","target","class","href","html","after","getInstance","Elementor_Template","_this2","templateID"],"mappings":"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","file":"admin-editor.js","sourcesContent":["(function ($) {","class Elementor_ContactForm{\n    static instance;\n\n    static getInstance() {\n        if (!Elementor_ContactForm.instance) {\n            Elementor_ContactForm.instance = new Elementor_ContactForm();\n        }\n        return Elementor_ContactForm.instance;\n    }\n\n    constructor(){\n        elementor.hooks.addAction( 'panel/open_editor/widget/opal-template', (panel) => {\n            this.onPanelShow(panel);\n        } );\n    }\n\n    onPanelShow(panel){\n        let templateIdControl = panel.content.currentView.collection.findWhere( { name: 'cf_id' } );\n\n        if ( ! templateIdControl || 'cf_id' !== templateIdControl.get( 'name' ) ) {\n            return; // No templates\n        }\n\n        let templateIdInput = panel.content.currentView.children.findByModelCid( templateIdControl.cid );\n\n        // Order templates by name.\n        let $controlOptions = templateIdInput.$el.find( 'option' ),\n            $select = templateIdInput.$el.find( 'select' ),\n            // Keep the first option ( - select -) without order.\n            $optionsSelect = $controlOptions.eq( 0 ),\n            currentValue = panel.content.currentView.model.get( 'settings' ).get( 'cf_id' );\n\n        delete $controlOptions[0];\n\n        $controlOptions.sort( function( a, b ) {\n            let c = a.text.toLowerCase(),\n                d = b.text.toLowerCase();\n            if ( c > d ) {\n                return 1;\n            } else if ( c < d ) {\n                return -1;\n            }\n            return 0;\n        } );\n\n        $select.empty().append( $optionsSelect ).append( $controlOptions );\n\n        // Reset value, because the 'selected option' is changed while play with the options.\n        $select.val( currentValue );\n\n        // Change Edit link on change template.\n        templateIdInput.on( 'input:change', this.onTemplateIdChange ).trigger( 'input:change' );\n\n    }\n\n\n    onTemplateIdChange(){\n        let formID = this.options.elementSettingsModel.attributes.template_id,\n            type = this.options.model.attributes.types[ formID ],\n            $editButton = this.$el.find( '.elementor-edit-' );\n\n        if ( '0' === formID || ! formID || 'widget' === type ) { // '0' = first option, 'widget' is editable only from Elementor page\n            if ( $editButton.length ) {\n                $editButton.remove();\n            }\n\n            return;\n        }\n\n        let editUrl = ElementorConfig.home_url + '?page=wpcf7&post=' + formID;\n\n        if ( $editButton.length ) {\n            $editButton.prop( 'href', editUrl );\n        } else {\n            $editButton = jQuery( '<a />', {\n                target: '_blank',\n                'class': 'elementor-button elementor-button-default elementor-edit-form',\n                href: editUrl,\n                html: '<i class=\"fa fa-pencil\" /> Edit Form'\n            } );\n\n            this.$el.find( '.elementor-control-input-wrapper' ).after( $editButton );\n        }\n    }\n}\n\nElementor_ContactForm.getInstance();","class Elementor_Template{\n    static instance;\n\n    static getInstance() {\n        if (!Elementor_Template.instance) {\n            Elementor_Template.instance = new Elementor_Template();\n        }\n        return Elementor_Template.instance;\n    }\n\n    constructor(){\n        elementor.hooks.addAction( 'panel/open_editor/widget/opal-template', (panel) => {\n            this.onPanelShow(panel);\n        } );\n    }\n\n    onPanelShow(panel){\n        let templateIdControl = panel.content.currentView.collection.findWhere( { name: 'template_id' } );\n\n        if ( ! templateIdControl || 'template_id' !== templateIdControl.get( 'name' ) ) {\n            return; // No templates\n        }\n\n        let templateIdInput = panel.content.currentView.children.findByModelCid( templateIdControl.cid );\n\n        // Order templates by name.\n        let $controlOptions = templateIdInput.$el.find( 'option' ),\n            $select = templateIdInput.$el.find( 'select' ),\n            // Keep the first option ( - select -) without order.\n            $optionsSelect = $controlOptions.eq( 0 ),\n            currentValue = panel.content.currentView.model.get( 'settings' ).get( 'template_id' );\n\n        delete $controlOptions[0];\n\n        $controlOptions.sort( function( a, b ) {\n            let c = a.text.toLowerCase(),\n                d = b.text.toLowerCase();\n            if ( c > d ) {\n                return 1;\n            } else if ( c < d ) {\n                return -1;\n            }\n            return 0;\n        } );\n\n        $select.empty().append( $optionsSelect ).append( $controlOptions );\n\n        // Reset value, because the 'selected option' is changed while play with the options.\n        $select.val( currentValue );\n\n        // Change Edit link on change template.\n        templateIdInput.on( 'input:change', this.onTemplateIdChange ).trigger( 'input:change' );\n\n    }\n\n\n    onTemplateIdChange(){\n        let templateID = this.options.elementSettingsModel.attributes.template_id,\n            type = this.options.model.attributes.types[ templateID ],\n            $editButton = this.$el.find( '.elementor-edit-template' );\n\n        if ( '0' === templateID || ! templateID || 'widget' === type ) { // '0' = first option, 'widget' is editable only from Elementor page\n            if ( $editButton.length ) {\n                $editButton.remove();\n            }\n\n            return;\n        }\n\n        let editUrl = ElementorConfig.home_url + '?p=' + templateID + '&elementor';\n\n        if ( $editButton.length ) {\n            $editButton.prop( 'href', editUrl );\n        } else {\n            $editButton = jQuery( '<a />', {\n                target: '_blank',\n                'class': 'elementor-button elementor-button-default elementor-edit-template',\n                href: editUrl,\n                html: '<i class=\"fa fa-pencil\" /> Edit Template'\n            } );\n\n            this.$el.find( '.elementor-control-input-wrapper' ).after( $editButton );\n        }\n    }\n}\n\nElementor_Template.getInstance();","})(jQuery);"]}